{"ast":null,"code":"import _defineProperty from\"/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/node_modules/@babel/runtime/helpers/esm/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra}from'../algorithms/dijkstra';import{AStar}from'../algorithms/aStar';import{dfs}from'../algorithms/dfs';import{bfs}from'../algorithms/bfs';import'./PathfindingVisualizer.css';var PathfindingVisualizer=/*#__PURE__*/function(_Component){_inherits(PathfindingVisualizer,_Component);function PathfindingVisualizer(){var _this;_classCallCheck(this,PathfindingVisualizer);_this=_possibleConstructorReturn(this,_getPrototypeOf(PathfindingVisualizer).call(this));_this.getInitialGrid=function(){var rowCount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:_this.state.ROW_COUNT;var colCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_this.state.COLUMN_COUNT;var initialGrid=[];for(var row=0;row<rowCount;row++){var currentRow=[];for(var col=0;col<colCount;col++){currentRow.push(_this.createNode(row,col));}initialGrid.push(currentRow);}return initialGrid;};_this.createNode=function(row,col){return{row:row,col:col,isStart:row===_this.state.START_NODE_ROW&&col===_this.state.START_NODE_COL,isFinish:row===_this.state.FINISH_NODE_ROW&&col===_this.state.FINISH_NODE_COL,// to be used in dijkstra, bfs and dfs  \ndistance:Infinity,// to be used in A star\ndistanceToFinishNode:Math.abs(_this.state.FINISH_NODE_ROW-row)+Math.abs(_this.state.FINISH_NODE_COL-col),isVisited:false,isWall:false,previousNode:null,isNode:true};};_this.state={grid:[],START_NODE_ROW:5,FINISH_NODE_ROW:5,START_NODE_COL:5,FINISH_NODE_COL:15,mouseIsPressed:false,ROW_COUNT:25,COLUMN_COUNT:35,MOBILE_ROW_COUNT:10,MOBILE_COLUMN_COUNT:20,isRunning:false,isStartNode:false,isFinishNode:false,isWallNode:false,// xxxxxxx\ncurrRow:0,currCol:0,isDesktopView:true};_this.handleMouseDown=_this.handleMouseDown.bind(_assertThisInitialized(_this));_this.handleMouseLeave=_this.handleMouseLeave.bind(_assertThisInitialized(_this));_this.toggleIsRunning=_this.toggleIsRunning.bind(_assertThisInitialized(_this));return _this;}_createClass(PathfindingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){var grid=this.getInitialGrid();this.setState({grid:grid});}},{key:\"toggleIsRunning\",value:function toggleIsRunning(){this.setState({isRunning:!this.state.isRunning});}},{key:\"toggleView\",value:function toggleView(){if(!this.state.isRunning){this.clearGrid();this.clearWalls();var isDesktopView=!this.state.isDesktopView;var grid;if(isDesktopView){grid=this.getInitialGrid(this.state.ROW_COUNT,this.state.COLUMN_COUNT);this.setState({isDesktopView:isDesktopView,grid:grid});}else{if(this.state.START_NODE_ROW>this.state.MOBILE_ROW_COUNT||this.state.FINISH_NODE_ROW>this.state.MOBILE_ROW_COUNT||this.state.START_NODE_COL>this.state.MOBILE_COLUMN_COUNT||this.state.FINISH_NODE_COL>this.state.MOBILE_COLUMN_COUNT){alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');}else{grid=this.getInitialGrid(this.state.MOBILE_ROW_COUNT,this.state.MOBILE_COLUMN_COUNT);this.setState({isDesktopView:isDesktopView,grid:grid});}}}}/******************** Set up the initial grid ********************/},{key:\"handleMouseDown\",/******************** Control mouse events ********************/value:function handleMouseDown(row,col){if(!this.state.isRunning){if(this.isGridClear()){if(document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className==='node node-start'){this.setState({mouseIsPressed:true,isStartNode:true,currRow:row,currCol:col});}else if(document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className==='node node-finish'){this.setState({mouseIsPressed:true,isFinishNode:true,currRow:row,currCol:col});}else{var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true,isWallNode:true,currRow:row,currCol:col});}}else{this.clearGrid();}}}},{key:\"isGridClear\",value:function isGridClear(){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this.state.grid[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var row=_step.value;var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=row[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var node=_step2.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName==='node node-visited'||nodeClassName==='node node-shortest-path'){return false;}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return!=null){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return true;}},{key:\"handleMouseEnter\",value:function handleMouseEnter(row,col){if(!this.state.isRunning){if(this.state.mouseIsPressed){var nodeClassName=document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className;if(this.state.isStartNode){if(nodeClassName!=='node node-wall'){var prevStartNode=this.state.grid[this.state.currRow][this.state.currCol];prevStartNode.isStart=false;document.getElementById(\"node-\".concat(this.state.currRow,\"-\").concat(this.state.currCol)).className='node';this.setState({currRow:row,currCol:col});var currStartNode=this.state.grid[row][col];currStartNode.isStart=true;document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-start';}this.setState({START_NODE_ROW:row,START_NODE_COL:col});}else if(this.state.isFinishNode){if(nodeClassName!=='node node-wall'){var prevFinishNode=this.state.grid[this.state.currRow][this.state.currCol];prevFinishNode.isFinish=false;document.getElementById(\"node-\".concat(this.state.currRow,\"-\").concat(this.state.currCol)).className='node';this.setState({currRow:row,currCol:col});var currFinishNode=this.state.grid[row][col];currFinishNode.isFinish=true;document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-finish';}this.setState({FINISH_NODE_ROW:row,FINISH_NODE_COL:col});}else if(this.state.isWallNode){var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}}}}},{key:\"handleMouseUp\",value:function handleMouseUp(row,col){if(!this.state.isRunning){this.setState({mouseIsPressed:false});if(this.state.isStartNode){var isStartNode=!this.state.isStartNode;this.setState({isStartNode:isStartNode,START_NODE_ROW:row,START_NODE_COL:col});}else if(this.state.isFinishNode){var isFinishNode=!this.state.isFinishNode;this.setState({isFinishNode:isFinishNode,FINISH_NODE_ROW:row,FINISH_NODE_COL:col});}this.getInitialGrid();}}},{key:\"handleMouseLeave\",value:function handleMouseLeave(){if(this.state.isStartNode){var isStartNode=!this.state.isStartNode;this.setState({isStartNode:isStartNode,mouseIsPressed:false});}else if(this.state.isFinishNode){var isFinishNode=!this.state.isFinishNode;this.setState({isFinishNode:isFinishNode,mouseIsPressed:false});}else if(this.state.isWallNode){var isWallNode=!this.state.isWallNode;this.setState({isWallNode:isWallNode,mouseIsPressed:false});this.getInitialGrid();}}/******************** Clear Board/Walls ********************/},{key:\"clearGrid\",value:function clearGrid(){if(!this.state.isRunning){var newGrid=this.state.grid.slice();var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=newGrid[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var row=_step3.value;var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=row[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var node=_step4.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'&&nodeClassName!=='node node-wall'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node';node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(this.state.FINISH_NODE_ROW-node.row)+Math.abs(this.state.FINISH_NODE_COL-node.col);}if(nodeClassName==='node node-finish'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=0;}if(nodeClassName==='node node-start'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(this.state.FINISH_NODE_ROW-node.row)+Math.abs(this.state.FINISH_NODE_COL-node.col);node.isStart=true;node.isWall=false;node.previousNode=null;node.isNode=true;}}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return!=null){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return!=null){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}}}},{key:\"clearWalls\",value:function clearWalls(){if(!this.state.isRunning){var newGrid=this.state.grid.slice();var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=newGrid[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var row=_step5.value;var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=row[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var node=_step6.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName==='node node-wall'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node';node.isWall=false;}}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6.return!=null){_iterator6.return();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return!=null){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}}}/******************** Create Animations ********************/},{key:\"visualize\",value:function visualize(algo){if(!this.state.isRunning){this.clearGrid();this.toggleIsRunning();var grid=this.state.grid;var startNode=grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];var finishNode=grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];var visitedNodesInOrder;switch(algo){case'Dijkstra':visitedNodesInOrder=dijkstra(grid,startNode,finishNode);break;case'AStar':visitedNodesInOrder=AStar(grid,startNode,finishNode);break;case'BFS':visitedNodesInOrder=bfs(grid,startNode,finishNode);break;case'DFS':visitedNodesInOrder=dfs(grid,startNode,finishNode);break;default:// should never get here\nbreak;}var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);nodesInShortestPathOrder.push('end');this.animate(visitedNodesInOrder,nodesInShortestPathOrder);}}},{key:\"animate\",value:function animate(visitedNodesInOrder,nodesInShortestPathOrder){var _this2=this;var _loop=function _loop(i){if(i===visitedNodesInOrder.length){setTimeout(function(){_this2.animateShortestPath(nodesInShortestPathOrder);},10*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';}},10*i);};for(var i=0;i<=visitedNodesInOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}/******************** Create path from start to finish ********************/},{key:\"animateShortestPath\",value:function animateShortestPath(nodesInShortestPathOrder){var _this3=this;var _loop2=function _loop2(i){if(nodesInShortestPathOrder[i]==='end'){setTimeout(function(){_this3.toggleIsRunning();},i*50);}else{setTimeout(function(){var node=nodesInShortestPathOrder[i];var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';}},i*40);}};for(var i=0;i<nodesInShortestPathOrder.length;i++){_loop2(i);}}},{key:\"render\",value:function render(){var _this4=this;var _this$state=this.state,grid=_this$state.grid,mouseIsPressed=_this$state.mouseIsPressed;return React.createElement(\"div\",null,React.createElement(\"nav\",{className:\"navbar navbar-expand-lg navbar-dark bg-dark \"},React.createElement(\"a\",{className:\"navbar-brand\",href:\"/\"},React.createElement(\"b\",null,\"PathFinding Visualizer\")),React.createElement(\"button\",{className:\"navbar-toggler\",type:\"button\",\"data-toggle\":\"collapse\",\"data-target\":\"#navbarNav\",\"aria-controls\":\"navbarNav\",\"aria-expanded\":\"false\",\"aria-label\":\"Toggle navigation\"},React.createElement(\"span\",{className:\"navbar-toggler-icon\"})),React.createElement(\"div\",{className:\"collapse navbar-collapse\",id:\"navbarNav\"},React.createElement(\"ul\",{className:\"navbar-nav\"},React.createElement(\"li\",{className:\"nav-item\"},React.createElement(\"a\",{className:\"nav-link\",href:\"https://github.com/siddhant-dutta/PathFindingVisualizer\"},' ',\"PathFinder Visualizer code\",' '))))),React.createElement(\"button\",{type:\"button\",className:\"btn btn-danger\",onClick:function onClick(){return _this4.clearGrid();}},\"Clear Grid\"),React.createElement(\"button\",{type:\"button\",className:\"btn btn-warning\",onClick:function onClick(){return _this4.clearWalls();}},\"Clear Walls\"),React.createElement(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:function onClick(){return _this4.visualize('Dijkstra');}},\"Dijkstra's\"),React.createElement(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:function onClick(){return _this4.visualize('AStar');}},\"A*\"),React.createElement(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:function onClick(){return _this4.visualize('BFS');}},\"Bread First Search\"),this.state.isDesktopView?React.createElement(\"button\",{type:\"button\",className:\"btn btn-light\",onClick:function onClick(){return _this4.toggleView();}},\"Mobile View\"):React.createElement(\"button\",{type:\"button\",className:\"btn btn-dark\",onClick:function onClick(){return _this4.toggleView();}},\"Desktop View\"),React.createElement(\"table\",{className:\"grid-container\",onMouseLeave:function onMouseLeave(){return _this4.handleMouseLeave();}},React.createElement(\"tbody\",{className:\"grid\"},grid.map(function(row,rowIdx){return React.createElement(\"tr\",{key:rowIdx},row.map(function(node,nodeIdx){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return React.createElement(Node,{key:nodeIdx,col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseDown:function onMouseDown(row,col){return _this4.handleMouseDown(row,col);},onMouseEnter:function onMouseEnter(row,col){return _this4.handleMouseEnter(row,col);},onMouseUp:function onMouseUp(){return _this4.handleMouseUp(row,col);},row:row});}));}))));}}]);return PathfindingVisualizer;}(Component);/******************** Create Walls ********************/export{PathfindingVisualizer as default};var getNewGridWithWallToggled=function getNewGridWithWallToggled(grid,row,col){// mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\nvar newGrid=grid.slice();var node=newGrid[row][col];if(!node.isStart&&!node.isFinish&&node.isNode){var newNode=_objectSpread({},node,{isWall:!node.isWall});newGrid[row][col]=newNode;}return newGrid;};// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode){var nodesInShortestPathOrder=[];var currentNode=finishNode;while(currentNode!==null){nodesInShortestPathOrder.unshift(currentNode);currentNode=currentNode.previousNode;}return nodesInShortestPathOrder;}","map":{"version":3,"sources":["/home/siddhant/Documents/CODES/summer proj/PathFindingVisualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","AStar","dfs","bfs","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","row","currentRow","col","push","createNode","isStart","START_NODE_ROW","START_NODE_COL","isFinish","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","isNode","grid","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","className","newGrid","getNewGridWithWallToggled","node","nodeClassName","prevStartNode","currStartNode","prevFinishNode","currFinishNode","slice","algo","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","i","length","setTimeout","animateShortestPath","visualize","toggleView","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","newNode","currentNode","unshift"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 5,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT,\r\n        );\r\n        this.setState({isDesktopView, grid});\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT,\r\n          );\r\n          this.setState({isDesktopView, grid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      // to be used in dijkstra, bfs and dfs  \r\n      distance: Infinity,\r\n      // to be used in A star\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <b>PathFinding Visualizer</b>\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  className=\"nav-link\"\r\n                  href=\"https://github.com/siddhant-dutta/PathFindingVisualizer\">\r\n                  {' '}\r\n                  PathFinder Visualizer code{' '}\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"https://prudhvignv.github.io\">\r\n                  Check Out Other Cool Projects\r\n                </a>\r\n              </li> */}\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning\"\r\n          onClick={() => this.clearWalls()}>\r\n          Clear Walls\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('Dijkstra')}>\r\n          Dijkstra's\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('AStar')}>\r\n          A*\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('BFS')}>\r\n          Bread First Search\r\n        </button>\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('DFS')}>\r\n          Depth First Search\r\n        </button> */}\r\n        {this.state.isDesktopView ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n            onClick={() => this.toggleView()}>\r\n            Mobile View\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark\"\r\n            onClick={() => this.toggleView()}>\r\n            Desktop View\r\n          </button>\r\n        )}\r\n\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}