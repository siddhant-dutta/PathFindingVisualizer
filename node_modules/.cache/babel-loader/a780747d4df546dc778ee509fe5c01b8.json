{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\nexport function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  let nextNodesStack = [startNode];\n\n  while (nextNodesStack.length) {\n    const currentNode = nextNodesStack.shift();\n    if (currentNode === finishNode) return visitedNodesInOrder;\n\n    if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\n      currentNode.isVisited = true;\n      visitedNodesInOrder.push(currentNode);\n      const col = currentNode.col,\n            row = currentNode.row;\n      const unvisitedNeighbors = getUnvisitedNeighbors(currentNode, grid);\n\n      for (const neighbor of unvisitedNeighbors) {\n        if (neighbor.isWall) continue;\n        neighbor.distance = currentNode.distance + 1;\n        nextNodesStack.push(neighbor);\n        neighbor.previousNode = currentNode;\n      }\n    }\n  }\n\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}","map":{"version":3,"sources":["/home/siddhant/Documents/CODES/pathFinderVisualizer-master/src/algorithms/bfs.js"],"names":["bfs","grid","startNode","finishNode","visitedNodesInOrder","nextNodesStack","length","currentNode","shift","isWall","isStart","isVisited","push","col","row","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","distance","previousNode","node","neighbors","filter"],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0C;AAC/C,QAAMC,mBAAmB,GAAG,EAA5B;AACA,MAAIC,cAAc,GAAG,CAACH,SAAD,CAArB;;AACA,SAAOG,cAAc,CAACC,MAAtB,EAA8B;AAC5B,UAAMC,WAAW,GAAGF,cAAc,CAACG,KAAf,EAApB;AACA,QAAID,WAAW,KAAKJ,UAApB,EAAgC,OAAOC,mBAAP;;AAEhC,QACE,CAACG,WAAW,CAACE,MAAb,KACCF,WAAW,CAACG,OAAZ,IAAuB,CAACH,WAAW,CAACI,SADrC,CADF,EAGE;AACAJ,MAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAP,MAAAA,mBAAmB,CAACQ,IAApB,CAAyBL,WAAzB;AAFA,YAGOM,GAHP,GAGmBN,WAHnB,CAGOM,GAHP;AAAA,YAGYC,GAHZ,GAGmBP,WAHnB,CAGYO,GAHZ;AAIA,YAAMC,kBAAkB,GAAGC,qBAAqB,CAACT,WAAD,EAAcN,IAAd,CAAhD;;AACA,WAAK,MAAMgB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzC,YAAGE,QAAQ,CAACR,MAAZ,EAAoB;AACpBQ,QAAAA,QAAQ,CAACC,QAAT,GAAoBX,WAAW,CAACW,QAAZ,GAAuB,CAA3C;AACAb,QAAAA,cAAc,CAACO,IAAf,CAAoBK,QAApB;AACAA,QAAAA,QAAQ,CAACE,YAAT,GAAwBZ,WAAxB;AACD;AACF;AACF;;AACD,SAAOH,mBAAP;AACD;;AAED,SAASY,qBAAT,CAA+BI,IAA/B,EAAqCnB,IAArC,EAA2C;AACzC,QAAMoB,SAAS,GAAG,EAAlB;AADyC,QAElCR,GAFkC,GAEtBO,IAFsB,CAElCP,GAFkC;AAAA,QAE7BC,GAF6B,GAEtBM,IAFsB,CAE7BN,GAF6B;AAGzC,MAAIA,GAAG,GAAG,CAAV,EAAaO,SAAS,CAACT,IAAV,CAAeX,IAAI,CAACa,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGb,IAAI,CAACK,MAAL,GAAc,CAAxB,EAA2Be,SAAS,CAACT,IAAV,CAAeX,IAAI,CAACa,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaQ,SAAS,CAACT,IAAV,CAAeX,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGZ,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAR,GAAiB,CAA3B,EAA8Be,SAAS,CAACT,IAAV,CAAeX,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOQ,SAAS,CAACC,MAAV,CAAiBL,QAAQ,IAAI,CAACA,QAAQ,CAACN,SAAvC,CAAP;AACD","sourcesContent":["// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  let nextNodesStack = [startNode];\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.shift();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      const {col, row} = currentNode;\r\n      const unvisitedNeighbors = getUnvisitedNeighbors(currentNode, grid);\r\n      for (const neighbor of unvisitedNeighbors) {\r\n        if(neighbor.isWall) continue;\r\n        neighbor.distance = currentNode.distance + 1;\r\n        nextNodesStack.push(neighbor);\r\n        neighbor.previousNode = currentNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}